{"ast":null,"code":"var _jsxFileName = \"E:\\\\Long\\\\WatchParty\\\\WatchParty\\\\frontend\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Tạo kết nối socket mới\n      const newSocket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000', {\n        auth: {\n          token: localStorage.getItem('token')\n        },\n        transports: ['websocket', 'polling']\n      });\n\n      // Xử lý kết nối\n      newSocket.on('connect', () => {\n        console.log('🔌 Kết nối Socket.io thành công');\n        setIsConnected(true);\n      });\n\n      // Xử lý ngắt kết nối\n      newSocket.on('disconnect', reason => {\n        console.log('🔌 Ngắt kết nối Socket.io:', reason);\n        setIsConnected(false);\n        if (reason === 'io server disconnect') {\n          // Server ngắt kết nối, thử kết nối lại\n          newSocket.connect();\n        }\n      });\n\n      // Xử lý lỗi kết nối\n      newSocket.on('connect_error', error => {\n        console.error('🔌 Lỗi kết nối Socket.io:', error);\n        setIsConnected(false);\n        toast.error('Lỗi kết nối realtime');\n      });\n\n      // Xử lý reconnect\n      newSocket.on('reconnect', attemptNumber => {\n        console.log('🔌 Kết nối lại Socket.io thành công sau', attemptNumber, 'lần thử');\n        setIsConnected(true);\n        toast.success('Đã kết nối lại realtime');\n      });\n      setSocket(newSocket);\n\n      // Cleanup khi component unmount\n      return () => {\n        newSocket.close();\n      };\n    } else {\n      // Nếu không đăng nhập, đóng socket\n      if (socket) {\n        socket.close();\n        setSocket(null);\n        setIsConnected(false);\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  // Hàm tham gia phòng\n  const joinRoom = roomId => {\n    if (socket && isConnected) {\n      socket.emit('join-room', {\n        roomId,\n        userId: user._id,\n        username: user.username\n      });\n    }\n  };\n\n  // Hàm rời phòng\n  const leaveRoom = roomId => {\n    if (socket && isConnected) {\n      socket.emit('leave-room', {\n        roomId,\n        userId: user._id,\n        username: user.username\n      });\n    }\n  };\n\n  // Hàm gửi tin nhắn\n  const sendMessage = (roomId, message) => {\n    if (socket && isConnected) {\n      socket.emit('chat-message', {\n        roomId,\n        message,\n        userId: user._id,\n        username: user.username\n      });\n    }\n  };\n\n  // Hàm điều khiển video\n  const sendVideoControl = (roomId, action, time) => {\n    if (socket && isConnected) {\n      socket.emit('video-control', {\n        roomId,\n        action,\n        time,\n        userId: user._id\n      });\n    }\n  };\n\n  // Hàm lắng nghe sự kiện\n  const onEvent = (event, callback) => {\n    if (socket) {\n      socket.on(event, callback);\n\n      // Trả về hàm để hủy lắng nghe\n      return () => socket.off(event, callback);\n    }\n  };\n\n  // Hàm hủy lắng nghe sự kiện\n  const offEvent = (event, callback) => {\n    if (socket) {\n      socket.off(event, callback);\n    }\n  };\n  const value = {\n    socket,\n    isConnected,\n    joinRoom,\n    leaveRoom,\n    sendMessage,\n    sendVideoControl,\n    onEvent,\n    offEvent\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"KhJGcvGaBWM0bIjiSpwzYmbopDs=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","toast","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","user","isAuthenticated","socket","setSocket","isConnected","setIsConnected","newSocket","process","env","REACT_APP_BACKEND_URL","auth","token","localStorage","getItem","transports","on","console","log","reason","connect","error","attemptNumber","success","close","joinRoom","roomId","emit","userId","_id","username","leaveRoom","sendMessage","message","sendVideoControl","action","time","onEvent","event","callback","off","offEvent","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Long/WatchParty/WatchParty/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const { user, isAuthenticated } = useAuth();\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && user) {\r\n      // Tạo kết nối socket mới\r\n      const newSocket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000', {\r\n        auth: {\r\n          token: localStorage.getItem('token')\r\n        },\r\n        transports: ['websocket', 'polling']\r\n      });\r\n\r\n      // Xử lý kết nối\r\n      newSocket.on('connect', () => {\r\n        console.log('🔌 Kết nối Socket.io thành công');\r\n        setIsConnected(true);\r\n      });\r\n\r\n      // Xử lý ngắt kết nối\r\n      newSocket.on('disconnect', (reason) => {\r\n        console.log('🔌 Ngắt kết nối Socket.io:', reason);\r\n        setIsConnected(false);\r\n        \r\n        if (reason === 'io server disconnect') {\r\n          // Server ngắt kết nối, thử kết nối lại\r\n          newSocket.connect();\r\n        }\r\n      });\r\n\r\n      // Xử lý lỗi kết nối\r\n      newSocket.on('connect_error', (error) => {\r\n        console.error('🔌 Lỗi kết nối Socket.io:', error);\r\n        setIsConnected(false);\r\n        toast.error('Lỗi kết nối realtime');\r\n      });\r\n\r\n      // Xử lý reconnect\r\n      newSocket.on('reconnect', (attemptNumber) => {\r\n        console.log('🔌 Kết nối lại Socket.io thành công sau', attemptNumber, 'lần thử');\r\n        setIsConnected(true);\r\n        toast.success('Đã kết nối lại realtime');\r\n      });\r\n\r\n      setSocket(newSocket);\r\n\r\n      // Cleanup khi component unmount\r\n      return () => {\r\n        newSocket.close();\r\n      };\r\n    } else {\r\n      // Nếu không đăng nhập, đóng socket\r\n      if (socket) {\r\n        socket.close();\r\n        setSocket(null);\r\n        setIsConnected(false);\r\n      }\r\n    }\r\n  }, [isAuthenticated, user]);\r\n\r\n  // Hàm tham gia phòng\r\n  const joinRoom = (roomId) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('join-room', {\r\n        roomId,\r\n        userId: user._id,\r\n        username: user.username\r\n      });\r\n    }\r\n  };\r\n\r\n  // Hàm rời phòng\r\n  const leaveRoom = (roomId) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('leave-room', {\r\n        roomId,\r\n        userId: user._id,\r\n        username: user.username\r\n      });\r\n    }\r\n  };\r\n\r\n  // Hàm gửi tin nhắn\r\n  const sendMessage = (roomId, message) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('chat-message', {\r\n        roomId,\r\n        message,\r\n        userId: user._id,\r\n        username: user.username\r\n      });\r\n    }\r\n  };\r\n\r\n  // Hàm điều khiển video\r\n  const sendVideoControl = (roomId, action, time) => {\r\n    if (socket && isConnected) {\r\n      socket.emit('video-control', {\r\n        roomId,\r\n        action,\r\n        time,\r\n        userId: user._id\r\n      });\r\n    }\r\n  };\r\n\r\n  // Hàm lắng nghe sự kiện\r\n  const onEvent = (event, callback) => {\r\n    if (socket) {\r\n      socket.on(event, callback);\r\n      \r\n      // Trả về hàm để hủy lắng nghe\r\n      return () => socket.off(event, callback);\r\n    }\r\n  };\r\n\r\n  // Hàm hủy lắng nghe sự kiện\r\n  const offEvent = (event, callback) => {\r\n    if (socket) {\r\n      socket.off(event, callback);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    joinRoom,\r\n    leaveRoom,\r\n    sendMessage,\r\n    sendVideoControl,\r\n    onEvent,\r\n    offEvent\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}